Here’s a step-by-step guide to help you determine the time and space complexity of any code. This approach will allow you to systematically break down a problem and analyze its efficiency.

1. Understand the Code Structure
- Before analyzing complexity, thoroughly understand what the code is doing. Look at the loops, recursive calls, and data structures involved.

2. Identify Key Operations
Identify the key operations that will determine the time complexity:

- Loops: Check how many times each loop runs.
- Conditionals: Consider how often different branches of if statements are executed.
- Recursion: Determine how deep the recursion goes and how many calls are made.
- Data Structure Operations: Look for operations on data structures like arrays, lists, hash maps, etc.

3. Calculate Time Complexity
- Constant Time Operations: Any single operation like assignment, arithmetic operation, comparison, etc., has O(1) time complexity.
    int x = 5;  // O(1)
- Loops:
    Single Loop: The time complexity is generally O(n), where n is the number of iterations.
    for (int i = 0; i < n; i++) {    
    // O(1) operation
    } 
    // Total time complexity: O(n)

    Nested Loops: Multiply the complexities of nested loops.
    for (int i = 0; i < n; i++) {    // O(n)    
        for (int j = 0; j < n; j++) // O(n)
        {      
            // O(1) operation    
        } 
    } // Total time complexity: O(n) * O(n) = O(n^2)
- Conditional Statements: Analyze each branch of the condition.
    if (condition) {
        // O(1) 
    } else {
         // O(n) 
    } // Choose the maximum complexity branch: O(n)

- Recursion: Analyze the recurrence relation. For example:
    int fib(int n) { if (n <= 1) return n; return fib(n - 1) + fib(n - 2); }
    The recurrence relation is T(n) = T(n-1) + T(n-2), leading to O(2^n) time complexity.
    Operations on Data Structures: Consider the time complexity for operations on different data structures.
- Array Access: O(1)
- Array Insertion/Deletion: O(n)
- Hash Map Access: O(1)
- Hash Map Insertion/Deletion: O(1)

4. Calculate Space Complexity
- Variables: Every primitive data type (int, char, float) occupies O(1) space.
    int x;  // O(1)
- Arrays and Containers:
    1D Array: Space complexity is O(n).
        int arr[n];  // O(n)
    2D Array: Space complexity is O(n*m).
        int arr[n][m];  // O(n*m)
- Auxiliary Space: Space used by variables, arrays, or any other structures inside the algorithm.
    int sum = 0;  // O(1)
- Recursive Call Stack: Each recursive call adds a new frame to the stack.
    int factorial(int n) {   
        if (n == 0) return 1;     
        return n * factorial(n - 1); 
    } // Space complexity: O(n) due to the call stack

5. Simplify the Big O Expression
- Ignore constants and lower-order terms:
    Example: O(2n + 5) simplifies to O(n).
    Example: O(n² + n) simplifies to O(n²).

6. Consider Best, Worst, and Average Case
- Best Case: The scenario where the algorithm performs the minimum number of steps.
- Worst Case: The scenario where the algorithm performs the maximum number of steps.
- Average Case: The expected scenario, considering all possible inputs.

7. Practice with Examples
- Simple Loop Example:
    for (int i = 0; i < n; i++) {     // O(1) operation }
    Time Complexity: O(n)
    Space Complexity: O(1)

- Nested Loop Example:
    for (int i = 0; i < n; i++) {     for (int j = 0; j < n; j++) {         // O(1) operation     } }
    Time Complexity: O(n²)
    Space Complexity: O(1)

- Binary Search:
    int binarySearch(int arr[], int n, int target) {     
        int left = 0, right = n - 1;     
        while (left <= right) {        
            int mid = left + (right - left) / 2;        
            if (arr[mid] == target) {             
                return mid;         
            }         
            if (arr[mid] < target) {             
                left = mid + 1;         
            } else {            
                right = mid - 1;        
            }    
        }     
        return -1; 
    }
    Time Complexity: O(log n)
    Space Complexity: O(1)

- Merge Two Sorted Arrays:
    void mergeArrays(int arr1[], int arr2[], int n1, int n2, int arr3[]) {  
        int i = 0, j = 0, k = 0;    
        while (i < n1 && j < n2) {         
            if (arr1[i] < arr2[j]) {             
                arr3[k++] = arr1[i++];         
            } else {             
                arr3[k++] = arr2[j++];         
            }     
        }     
        while (i < n1) {         
            arr3[k++] = arr1[i++];     
        }     
        while (j < n2) {         
            arr3[k++] = arr2[j++];     
        }
    }
    Time Complexity: O(n1 + n2)
    Space Complexity: O(n1 + n2)

* Final Tips:
- Practice: Regularly practice analyzing code snippets.
- Break Down the Code: Always break down the code into smaller parts to analyze.
- Explain Out Loud: In interviews, explain your thought process as you calculate complexities.
- Seek Patterns: Over time, recognizing common patterns in loops, recursion, and data structures - will help you quickly identify complexities.